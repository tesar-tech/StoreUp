# Submit new package to Microsoft Store
# Steps:
  # download source code
  # change version in manifest file
  # restore package, build solution
  # upload to store 

trigger:
- master
pr: none #don't run build won pull requests

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'x86|x64|ARM'
  buildConfiguration: 'Release'
  appxPackageDir: '$(build.artifactStagingDirectory)\AppxPackages\\'
  majorMinorBuildVer: "1.1"
  buildNum: $[counter(variables['majorMinorBuildVer'], 0)] # this number increment with every build. Starts with 0, when majorMinor changes
  versionOfApp: '$(majorMinorBuildVer).$(buildNum).0' #revision number has to be 0, otherwise it will drop the package in store.



jobs:
  - job: Build
    steps:
    - task: NuGetToolInstaller@1

    - task: NuGetCommand@2
      inputs:
        restoreSolution: '$(solution)'

    - task: VersionAPPX@2 #just changes version in manifest file
      inputs:
          Path: '$(Build.SourcesDirectory)'
          VersionNumber: '$(versionOfApp)'
          InjectVersion: False
          VersionRegex: '(0|[1-9][0-9]{0,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])(\.(0|[1-9][0-9]{0,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])){3}'
          OutputVersion: 'OutputedVersion'
    - task: VSBuild@1
      inputs:
          solution: '$(solution)'
          msbuildArgs: '/p:AppxBundlePlatforms="$(buildPlatform)" /p:AppxPackageDir="$(appxPackageDir)" /p:AppxBundle=Always 
                        /p:UapAppxPackageBuildMode=StoreUpload 
                        /p:AppxPackageSigningEnabled=false' #store will sign package
          configuration: '$(buildConfiguration)'
          
  - job: Publish
    dependsOn: Build #Run only when build succeeded
    steps:
    - task: store-publish@0
      inputs:
          serviceEndpoint: 'NaWinDevCenter'
          appId: '9PH5NNZ5BXFQ'
          metadataUpdateMethod: 'JsonMetadata'
          metadataPath: '$(system.defaultworkingdirectory)\NoApp\Store\appMetadata' # path where storeListing exists (with images)
          updateImages: true
          packagePath: '$(appxPackageDir)\*.msixupload'
          force: true #force will delete any in progess submission
          skipPolling: true # if false, pipeline will finish after package is approved (or declined)
          deletePackages: true
          numberOfPackagesToKeep: '5'
          isMandatoryUpdate: true
